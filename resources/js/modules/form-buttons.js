import $ from 'jquery';
import { FormValidation } from './form-validation.js';
import { ApiService } from './api-service.js';

/**
 * M√≥dulo de Bot√µes do Formul√°rio
 * Gerencia comportamento dos bot√µes e submiss√£o
 */
export const FormButtons = {
    init: function() {
        console.log('üöÄ FormButtons.init() - Inicializando m√≥dulo de bot√µes');
        this.bindButtonEvents();
        this.bindFormSubmission();
        
        // Configurar token CSRF para todas as requisi√ß√µes AJAX
        const csrfToken = $('meta[name="csrf-token"]').attr('content');
        console.log('üîë CSRF Token encontrado:', csrfToken ? 'SIM' : 'N√ÉO');
        
        $.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': csrfToken
            }
        });
    },

    bindButtonEvents: function() {
        console.log('üîó FormButtons.bindButtonEvents() - Vinculando eventos dos bot√µes');
        $('#btn-salvar-rascunho').on('click', (e) => {
            console.log('üíæ Bot√£o Salvar Rascunho clicado');
            this.handleSaveDraft($(e.target));
        });
    },

    bindFormSubmission: function() {
        console.log('üìù FormButtons.bindFormSubmission() - Vinculando submiss√£o do formul√°rio');
        $('form').on('submit', async (e) => {
            console.log('üì§ Formul√°rio submetido - preventDefault aplicado');
            e.preventDefault();
            return await this.handleSubmit(e, $(e.target));
        });
    },

    handleSaveDraft: function(btn) {
        console.log('üíæ FormButtons.handleSaveDraft() - Iniciando salvamento de rascunho');
        const originalText = btn.html();
        
        btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Salvando...');
        
        setTimeout(function() {
            console.log('‚úÖ Simula√ß√£o de salvamento de rascunho conclu√≠da');
            btn.prop('disabled', false).html('<i class="fas fa-check me-2"></i>Salvo!');
            
            setTimeout(function() {
                btn.html(originalText);
                console.log('üîÑ Bot√£o restaurado ao estado original');
            }, 2000);
        }, 1000);
    },

    async handleSubmit(e, form) {
        console.log('üöÄ FormButtons.handleSubmit() - Iniciando processamento do formul√°rio');
        
        const submitBtn = form.find('button[type="submit"]');
        const isEdit = form.find('input[name="_method"][value="PUT"]').length > 0;
        
        console.log('üìä Dados do formul√°rio:', {
            'form_action': form.attr('action'),
            'is_edit': isEdit,
            'form_data_length': form.serialize().length
        });
        
        const camposVazios = FormValidation.validateForm();
        
        if (camposVazios.length > 0) {
            console.error('‚ùå Valida√ß√£o falhou - Campos obrigat√≥rios vazios:', camposVazios);
            alert('Campos obrigat√≥rios n√£o preenchidos: ' + camposVazios.join(', '));
            return false;
        }
        
        console.log('‚úÖ Valida√ß√£o passou - Todos os campos obrigat√≥rios preenchidos');
        
        submitBtn.prop('disabled', true)
               .html('<i class="fas fa-spinner fa-spin me-2"></i>Enviando para aprova√ß√£o...');
        
        try {
            const formData = new FormData(form[0]);
            const csrfToken = $('meta[name="csrf-token"]').attr('content');
            
            console.log('üîë Token CSRF para requisi√ß√£o:', csrfToken ? 'PRESENTE' : 'AUSENTE');
            
            if (isEdit) {
                console.log('‚úèÔ∏è Modo EDI√á√ÉO detectado - Enviando para aprova√ß√£o diretamente');
                
                const pppId = form.attr('action').split('/').pop();
                console.log('üÜî PPP ID extra√≠do:', pppId);
                
                const url = `/ppp/${pppId}/enviar-aprovacao`;
                console.log('üåê URL da requisi√ß√£o:', url);
                
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': csrfToken
                    }
                });
                
                console.log('üì° Resposta da requisi√ß√£o de envio:', {
                    'status': response.status,
                    'ok': response.ok,
                    'status_text': response.statusText
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ Resposta JSON recebida:', result);
                    
                    if (result.success) {
                        console.log('üéâ Envio para aprova√ß√£o bem-sucedido - Redirecionando');
                        window.location.href = '/ppp';
                    } else {
                        console.error('‚ùå Erro no resultado:', result.message);
                        throw new Error(result.message || 'Erro ao enviar para aprova√ß√£o');
                    }
                } else {
                    console.error('‚ùå Erro HTTP na requisi√ß√£o:', response.status);
                    const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido' }));
                    console.error('‚ùå Dados do erro:', errorData);
                    throw new Error(errorData.message || 'Erro ao enviar para aprova√ß√£o');
                }
            } else {
                console.log('üÜï Modo CRIA√á√ÉO detectado - Salvando e depois enviando');
                
                formData.append('enviar_aprovacao', '1');
                console.log('üìù Par√¢metro enviar_aprovacao adicionado ao FormData');
                
                const createUrl = '/ppp';
                console.log('üåê URL de cria√ß√£o:', createUrl);
                
                const response = await fetch(createUrl, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': csrfToken
                    }
                });
                
                console.log('üì° Resposta da cria√ß√£o do PPP:', {
                    'status': response.status,
                    'ok': response.ok,
                    'status_text': response.statusText
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ PPP criado com sucesso:', result);
                    
                    if (result.success && result.ppp_id) {
                        console.log('üöÄ Iniciando envio para aprova√ß√£o do PPP criado:', result.ppp_id);
                        
                        // Enviar para aprova√ß√£o ap√≥s cria√ß√£o
                        const enviarFormData = new FormData();
                        enviarFormData.append('_token', csrfToken);
                        
                        const enviarUrl = `/ppp/${result.ppp_id}/enviar-aprovacao`;
                        console.log('üåê URL de envio para aprova√ß√£o:', enviarUrl);
                        
                        const enviarResponse = await fetch(enviarUrl, {
                            method: 'POST',
                            body: enviarFormData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'X-CSRF-TOKEN': csrfToken
                            }
                        });
                        
                        console.log('üì° Resposta do envio para aprova√ß√£o:', {
                            'status': enviarResponse.status,
                            'ok': enviarResponse.ok,
                            'status_text': enviarResponse.statusText
                        });
                        
                        if (enviarResponse.ok) {
                            const enviarResult = await enviarResponse.json();
                            console.log('‚úÖ Resultado do envio para aprova√ß√£o:', enviarResult);
                            
                            if (enviarResult.success) {
                                console.log('üéâ Processo completo bem-sucedido - Redirecionando');
                                window.location.href = '/ppp';
                            } else {
                                console.error('‚ùå Erro no envio para aprova√ß√£o:', enviarResult.message);
                                throw new Error(enviarResult.message || 'Erro ao enviar para aprova√ß√£o');
                            }
                        } else {
                            console.error('‚ùå Erro HTTP no envio para aprova√ß√£o:', enviarResponse.status);
                            const errorData = await enviarResponse.json().catch(() => ({ message: 'Erro desconhecido' }));
                            console.error('‚ùå Dados do erro no envio:', errorData);
                            throw new Error(errorData.message || 'Erro ao enviar para aprova√ß√£o');
                        }
                    } else {
                        console.error('‚ùå Erro na cria√ß√£o do PPP:', result.message);
                        throw new Error(result.message || 'Erro ao salvar PPP');
                    }
                } else {
                    console.error('‚ùå Erro HTTP na cria√ß√£o do PPP:', response.status);
                    const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido' }));
                    console.error('‚ùå Dados do erro na cria√ß√£o:', errorData);
                    throw new Error(errorData.message || 'Erro ao salvar PPP');
                }
            }
        } catch (error) {
            console.error('üí• Erro capturado no handleSubmit:', error);
            console.error('üí• Stack trace:', error.stack);
            alert('Erro ao processar solicita√ß√£o: ' + error.message);
            
            submitBtn.prop('disabled', false)
                   .html('<i class="fas fa-paper-plane me-2"></i>Salvar e Enviar para Aprova√ß√£o');
        }
        
        console.log('üèÅ FormButtons.handleSubmit() - Finalizando processamento');
        return false;
    }
};